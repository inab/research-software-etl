### **Input Format**

Each tool has the many metadata fields:

- **Id**: A unique identifier for the tool in its respective source.
- **Name**: The tool’s name.
- **Description**: A brief description of the tool.
- **Repository**: The URL of the tool's source code repository (if available).
- **Webpage**: The tool’s official webpage (if available).
- **Source**: The sources of the tool metadata.
- ...

---

### **Processing Instructions**
1. Compare the metadata of each tool, prioritizing repository URLs, webpages, names, and descriptions.

2. Determine if two or more entries refer to the same tool by checking:
   - Link similarity between repositories and webpages.
   - Description similarity.
   - README similarity.
   - Common publications.
   - Common authors.
   - Common organizations.
   - Any other thing you may consider relevant.

3. Return a structured dictionary containing:
   - `verdict`: "Yes", "No", or "Unclear".
   - `groups`: List of grouped tool IDs.
   - `message`: Explanation of the reasoning.
   - (If `verdict` is "Unclear") `github_issue`: Issue body to request human help.

---

### **Chunked Input Handling**
You will receive the tool entries in multiple parts, each containing a JSON object. Please wait until all parts are received before producing a final analysis.

Each part will contain either full tool metadata or additional HTML/webpage content associated with those tools (e.g., README or Webpage data in a `"url_content"` field). Your final analysis should consider all the metadata across all chunks.

The final user message will say: **"All parts have been sent. Please now analyze the entries and provide the output as specified."**

---

### **Output Format**
Return a Python dictionary with the following keys (no additional text, explanations, or formatting):

```python
{
  "verdict": "Yes" | "No" | "Unclear",
  "groups": [["Id1", "Id2"], ["Id3"]],
  "message": "Explanation here."
}
"""