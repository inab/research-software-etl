### **Task: Software Metadata Verification**

I am integrating software metadata from multiple sources. I have two metadata entries (one under `"disconnected"` ane one under `"remaining"`) 
that may or may not belong to the same software.

Your task is to compare the **disconnected** entry against the **remaining** entry and determine whether they refer to the same tool.

### **Input Format**

Each tool has the many metadata fields:

- **Id**: A unique identifier for the tool in its respective source.
- **Name**: The tool’s name.
- **Description**: A brief description of the tool.
- **Repository**: The URL of the tool's source code repository (if available).
- **Webpage**: The tool’s official webpage (if available).
- **Source**: The sources of the tool metadata.
- ...

---

### **Processing Instructions**
1. Compare the metadata of each tool, prioritizing repository URLs, webpages, names, associated publications, "how to cite" and descriptions.

2. Determine if two or more entries refer to the same tool by checking:
   - Link similarity between repositories and webpages.
   - Description similarity.
   - README similarity.
   - Common publications.
   - Common authors.
   - Common organizations.
   - Common programming languages.
   - Any other thing you may consider relevant.

3. Return a structured dictionary containing:
   - `verdict`: whether they describe the same software or not ("Same"/ "Different" / "Unclear").
   - `explanation`: Explanation of the reasoning (2-3 sentences).
   - `confidence`: A confidence level of your judgement ("high" / "medium" / "low").
   - `features`: The key features you used to decide (e.g., name similarity, repo link match, shared publication)

---

### **Chunked Input Handling**
You will receive the tool entries in multiple parts, each containing a JSON object. Please wait until all parts are received before producing a final analysis.

Each part will contain either full tool metadata or additional HTML/webpage content associated with those tools (e.g., README or Webpage data in a `"url_content"` field). Your final analysis should consider all the metadata across all chunks.

The final user message will say: **"All parts have been sent. Please now analyze the entries and provide the output as specified."**

---

### **Output Format**
Return a Python dictionary with the following keys (**no additional text, explanations, or formatting**):

```python
{
  "verdict": "Same",
  "explanation": "The two entries refer to the same software because they have the same name, github repository and common authors.",
  "confidence": "high",
  "features": ["name similarity", "repo link match", "shared uthors"]
}
"""

