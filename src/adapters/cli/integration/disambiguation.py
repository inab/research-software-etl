"""
The command-line interface for the disambiguation step of the integration
"""

import argparse
import logging
from dotenv import load_dotenv

logger = logging.getLogger("rs-etl-pipeline")

def main():
    parser = argparse.ArgumentParser(
        description="""Resolve conflicts in the grouped entries."""
    )

    parser.add_argument(
        "--grouped-entries-file", "-g",
        help=("Path to the file containing grouped entries. Generated by the grouping and recovery step of the integration. Default is 'data/grouped.json'."),
        type=str,
        dest="grouped_entries_file",
        default="data/grouped.json",
    )

    parser.add_argument(
        "--disconnected-entries-file", "-d",
        help=("Path to the file containing disconnected entries. This is the output of the 'conflict_detection' process. Default is 'data/disconnected.json'."),
        type=str,
        dest="disconnected_entries_file",
        default="data/disconnected.json",
    )

    parser.add_argument(
        "--new-grouped-entries-file", "-n",
        help=("Path to the file where the disambiguated grouped entries and all other groups will be written. Default is 'data/disambiguated_grouped.json'."),
    )

    parser.add_argument(
        "--results-file", "-r",
        help=("Path to the file where the results of the disambiguation process will be written. Default is 'data/results.json'."),
    )

    parser.add_argument(
        "--env-file", "-e",
        help=("File containing environment variables to be set before running "),
        default=".env",
    )


    args = parser.parse_args()

    # Load the environment variables ------------------------------------------
    logger.debug(f"Env file: {args.env_file}")
    load_dotenv(args.env_file)

    from src.application.use_cases.integration.disambiguation import disambiguate_entries


    logger.info(f"Grouped entries file: {args.grouped_entries_file}")
    logger.info(f"Disconnected entries file: {args.disconnected_entries_file}")
    logger.info(f"New grouped entries file: {args.new_grouped_entries_file}")
    logger.info(f"Results file: {args.results_file}")

    logger.info("Disambiguating entries...")
    disambiguate_entries(args.grouped_entries_file, args.disconnected_entries_file, args.new_grouped_entries_file, args.results_file)

    logger.info("Disambiguation finished!")


if __name__ == "__main__":
    print("Running disambiguation...")
    main()