"""
The command-line interface for the disambiguation step of the integration
"""

import argparse
import logging
import asyncio


from dotenv import load_dotenv

logger = logging.getLogger("rs-etl-pipeline")

async def main():
    parser = argparse.ArgumentParser(
        description="""Resolve conflicts in the grouped entries."""
    )

    parser.add_argument(
        "--blocks-file", "-g",
        help=("Path to the file containing blocks of records. Generated by the grouping and recovery step of the integration. Default is 'data/grouped.json'."),
        type=str,
        dest="blocks_file",
        #default="data/blocks.json",
    )

    parser.add_argument(
        "--conflict-blocks-file", "-d",
        help=("Path to the file containing conflict blocks. This is the output of the 'conflict_detection' process. Default is 'data/disconnected.json'."),
        type=str,
        dest="conflict_blocks_file",
        #default="data/conflict_blocks.json",
    )

    parser.add_argument(
        "--disambiguated-blocks-file", "-n",
        help=("Path to the file where the disambiguated grouped entries and all other groups will be written. Default is 'data/disambiguated_grouped.json'."),
        type=str,
        dest="disambiguated_blocks_file"
    )

    parser.add_argument(
        "--env-file", "-e",
        help=("File containing environment variables to be set before running "),
        default=".env",
    )


    args = parser.parse_args()

    # Load the environment variables ------------------------------------------
    logger.debug(f"Env file: {args.env_file}")
    load_dotenv(args.env_file)

    from src.application.use_cases.integration.disambiguation import run_full_disambiguation


    logger.info(f"Blocks file: {args.blocks_file}")
    logger.info(f"Conflict blocks file: {args.conflict_blocks_file}")
    logger.info(f"Disambiguated blocks file: {args.disambiguated_blocks_file}")

    logger.info("Disambiguating entries...")
    await run_full_disambiguation(
        blocks_file=args.blocks_file,
        conflict_blocks_file=args.conflict_blocks_file,
        disambiguated_blocks_file=args.disambiguated_blocks_file
    )

    logger.info("Disambiguation finished!")


if __name__ == "__main__":
    print("Running disambiguation...")
    asyncio.run(main())